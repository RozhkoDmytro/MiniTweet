# Database Configuration
# These variables are automatically loaded by docker-compose.yml
DB_NAME=tweet_db
DB_USER=postgres
DB_PASSWORD=admin
DB_PORT=5432

# Web Application Configuration
WEB_PORT=8000
DEBUG=1

# Django Settings Module
# Choose which settings to use:
# - minitweet.settings (development)
# - minitweet.docker_settings (Docker development)
DJANGO_SETTINGS_MODULE=minitweet.docker_settings

# Docker Configuration
# Choose which Dockerfile to use
DOCKERFILE=Dockerfile

# Django Configuration
# Generate a new secret key for production: python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
SECRET_KEY=django-insecure-*-yfj-ak#ppp!*h7+4wwnb$hhpop*m+b)c_y0o28#h1dh63594

# Production overrides (uncomment and modify for production)
# DEBUG=0
# DJANGO_SETTINGS_MODULE=minitweet.settings
# SECRET_KEY=your-secure-secret-key-here
# DB_PASSWORD=your-secure-db-password

# Example of secure production values:
# DEBUG=0
# DJANGO_SETTINGS_MODULE=minitweet.settings
# SECRET_KEY=your-very-long-random-secret-key-here
# DB_PASSWORD=your-very-secure-database-password

# File Storage Strategy:
# - Development: Files stored in local ./media and ./static folders
# - All settings controlled through .env file
